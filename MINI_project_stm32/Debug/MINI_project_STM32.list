
MINI_project_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000630  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000760  08000760  00010760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000784  08000784  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000784  08000784  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000784  08000784  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000784  08000784  00010784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000788  08000788  00010788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800078c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000790  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000790  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005921  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d32  00000000  00000000  0002594e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000180  00000000  00000000  00026680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00002a2e  00000000  00000000  00026800  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002ebe  00000000  00000000  0002922e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009d26  00000000  00000000  0002c0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00035e12  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00000638  00000000  00000000  00035e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000000e0  00000000  00000000  000364c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00000348  00000000  00000000  000365a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000748 	.word	0x08000748

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000748 	.word	0x08000748

08000170 <HAL_button_vInit>:
#include "STM32_F103C6_GPIO_Driver.h"




void HAL_button_vInit(GPIO_TypeDef *GPIOx,GPIO_PINConfig_t *Pinconfig){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	MCAL_GPIO_Init(GPIOx, Pinconfig);
 800017a:	6839      	ldr	r1, [r7, #0]
 800017c:	6878      	ldr	r0, [r7, #4]
 800017e:	f000 f895 	bl	80002ac <MCAL_GPIO_Init>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}

0800018a <HAL_button_u8read>:



uint8_t HAL_button_u8read(GPIO_TypeDef *GPIOx,uint8_t GPIO_PinNumber){
 800018a:	b580      	push	{r7, lr}
 800018c:	b082      	sub	sp, #8
 800018e:	af00      	add	r7, sp, #0
 8000190:	6078      	str	r0, [r7, #4]
 8000192:	460b      	mov	r3, r1
 8000194:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_ReadPin(GPIOx, GPIO_PinNumber);
 8000196:	78fb      	ldrb	r3, [r7, #3]
 8000198:	b29b      	uxth	r3, r3
 800019a:	4619      	mov	r1, r3
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f000 f912 	bl	80003c6 <MCAL_GPIO_ReadPin>
}
 80001a2:	bf00      	nop
 80001a4:	4618      	mov	r0, r3
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <SSD_BCD_init>:

#include "SSD_BCD_interface.h"
#include "STM32F103x6.h"
#include "STM32_F103C6_GPIO_Driver.h"

void SSD_BCD_init(GPIO_TypeDef *GPIOx, GPIO_PINConfig_t *SSD_BCDconfig){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	6039      	str	r1, [r7, #0]
	MCAL_GPIO_Init(GPIOx, SSD_BCDconfig);
 80001b6:	6839      	ldr	r1, [r7, #0]
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f000 f877 	bl	80002ac <MCAL_GPIO_Init>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}

080001c6 <SSD_BCD_display>:

void SSD_BCD_display(GPIO_TypeDef *GPIOx, uint8_t number){
 80001c6:	b580      	push	{r7, lr}
 80001c8:	b082      	sub	sp, #8
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	460b      	mov	r3, r1
 80001d0:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_WritePort(GPIOx, number);
 80001d2:	78fb      	ldrb	r3, [r7, #3]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f000 f90b 	bl	80003f4 <MCAL_GPIO_WritePort>
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}

080001e6 <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b083      	sub	sp, #12
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	4603      	mov	r3, r0
 80001ee:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80001f0:	88fb      	ldrh	r3, [r7, #6]
 80001f2:	2b80      	cmp	r3, #128	; 0x80
 80001f4:	d042      	beq.n	800027c <Get_CRLH_Position+0x96>
 80001f6:	2b80      	cmp	r3, #128	; 0x80
 80001f8:	dc11      	bgt.n	800021e <Get_CRLH_Position+0x38>
 80001fa:	2b08      	cmp	r3, #8
 80001fc:	d036      	beq.n	800026c <Get_CRLH_Position+0x86>
 80001fe:	2b08      	cmp	r3, #8
 8000200:	dc06      	bgt.n	8000210 <Get_CRLH_Position+0x2a>
 8000202:	2b02      	cmp	r3, #2
 8000204:	d02e      	beq.n	8000264 <Get_CRLH_Position+0x7e>
 8000206:	2b04      	cmp	r3, #4
 8000208:	d02e      	beq.n	8000268 <Get_CRLH_Position+0x82>
 800020a:	2b01      	cmp	r3, #1
 800020c:	d028      	beq.n	8000260 <Get_CRLH_Position+0x7a>
 800020e:	e047      	b.n	80002a0 <Get_CRLH_Position+0xba>
 8000210:	2b20      	cmp	r3, #32
 8000212:	d02f      	beq.n	8000274 <Get_CRLH_Position+0x8e>
 8000214:	2b40      	cmp	r3, #64	; 0x40
 8000216:	d02f      	beq.n	8000278 <Get_CRLH_Position+0x92>
 8000218:	2b10      	cmp	r3, #16
 800021a:	d029      	beq.n	8000270 <Get_CRLH_Position+0x8a>
 800021c:	e040      	b.n	80002a0 <Get_CRLH_Position+0xba>
 800021e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000222:	d033      	beq.n	800028c <Get_CRLH_Position+0xa6>
 8000224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000228:	dc09      	bgt.n	800023e <Get_CRLH_Position+0x58>
 800022a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800022e:	d029      	beq.n	8000284 <Get_CRLH_Position+0x9e>
 8000230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000234:	d028      	beq.n	8000288 <Get_CRLH_Position+0xa2>
 8000236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800023a:	d021      	beq.n	8000280 <Get_CRLH_Position+0x9a>
 800023c:	e030      	b.n	80002a0 <Get_CRLH_Position+0xba>
 800023e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000242:	d027      	beq.n	8000294 <Get_CRLH_Position+0xae>
 8000244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000248:	dc03      	bgt.n	8000252 <Get_CRLH_Position+0x6c>
 800024a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800024e:	d01f      	beq.n	8000290 <Get_CRLH_Position+0xaa>
 8000250:	e026      	b.n	80002a0 <Get_CRLH_Position+0xba>
 8000252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000256:	d01f      	beq.n	8000298 <Get_CRLH_Position+0xb2>
 8000258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800025c:	d01e      	beq.n	800029c <Get_CRLH_Position+0xb6>
 800025e:	e01f      	b.n	80002a0 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000260:	2300      	movs	r3, #0
 8000262:	e01e      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8000264:	2304      	movs	r3, #4
 8000266:	e01c      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 8000268:	2308      	movs	r3, #8
 800026a:	e01a      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 800026c:	230c      	movs	r3, #12
 800026e:	e018      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000270:	2310      	movs	r3, #16
 8000272:	e016      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_5:
		return 20 ;
 8000274:	2314      	movs	r3, #20
 8000276:	e014      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000278:	2318      	movs	r3, #24
 800027a:	e012      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 800027c:	231c      	movs	r3, #28
 800027e:	e010      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 8000280:	2300      	movs	r3, #0
 8000282:	e00e      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 8000284:	2304      	movs	r3, #4
 8000286:	e00c      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000288:	2308      	movs	r3, #8
 800028a:	e00a      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 800028c:	230c      	movs	r3, #12
 800028e:	e008      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000290:	2310      	movs	r3, #16
 8000292:	e006      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 8000294:	2314      	movs	r3, #20
 8000296:	e004      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000298:	2318      	movs	r3, #24
 800029a:	e002      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 800029c:	231c      	movs	r3, #28
 800029e:	e000      	b.n	80002a2 <Get_CRLH_Position+0xbc>
		break ;


	}
	return 0 ;
 80002a0:	2300      	movs	r3, #0

}
 80002a2:	4618      	mov	r0, r3
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PINConfig_t* PinConfig)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* ConfigRegister = NULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]

	uint8_t PIN_Config = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber<GPIO_PIN_8)?(&GPIOx->GPIOx_CRL):(&GPIOx->GPIOx_CRH);
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	2bff      	cmp	r3, #255	; 0xff
 80002c4:	d801      	bhi.n	80002ca <MCAL_GPIO_Init+0x1e>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	e001      	b.n	80002ce <MCAL_GPIO_Init+0x22>
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	3304      	adds	r3, #4
 80002ce:	60bb      	str	r3, [r7, #8]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	881b      	ldrh	r3, [r3, #0]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff86 	bl	80001e6 <Get_CRLH_Position>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	230f      	movs	r3, #15
 80002e0:	4093      	lsls	r3, r2
 80002e2:	43da      	mvns	r2, r3
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	401a      	ands	r2, r3
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	789b      	ldrb	r3, [r3, #2]
 80002f2:	2b07      	cmp	r3, #7
 80002f4:	d00b      	beq.n	800030e <MCAL_GPIO_Init+0x62>
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	789b      	ldrb	r3, [r3, #2]
 80002fa:	2b06      	cmp	r3, #6
 80002fc:	d007      	beq.n	800030e <MCAL_GPIO_Init+0x62>
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	789b      	ldrb	r3, [r3, #2]
 8000302:	2b05      	cmp	r3, #5
 8000304:	d003      	beq.n	800030e <MCAL_GPIO_Init+0x62>
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	789b      	ldrb	r3, [r3, #2]
 800030a:	2b04      	cmp	r3, #4
 800030c:	d11c      	bne.n	8000348 <MCAL_GPIO_Init+0x9c>
	{
		//Set CNFy[1:0] and MODEx[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE -4) << 2) | ((PinConfig->GPIO_Output_Speed) << 0)) & 0x0F );
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	789b      	ldrb	r3, [r3, #2]
 8000312:	3b04      	subs	r3, #4
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	b25a      	sxtb	r2, r3
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	78db      	ldrb	r3, [r3, #3]
 800031c:	b25b      	sxtb	r3, r3
 800031e:	4313      	orrs	r3, r2
 8000320:	b25b      	sxtb	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f003 030f 	and.w	r3, r3, #15
 8000328:	73fb      	strb	r3, [r7, #15]
		(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 800032a:	7bfc      	ldrb	r4, [r7, #15]
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff58 	bl	80001e6 <Get_CRLH_Position>
 8000336:	4603      	mov	r3, r0
 8000338:	fa04 f203 	lsl.w	r2, r4, r3
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	431a      	orrs	r2, r3
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	e02c      	b.n	80003a2 <MCAL_GPIO_Init+0xf6>
	}
	//if pin is input
	else //MODE = 00 :Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)||(PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	789b      	ldrb	r3, [r3, #2]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d003      	beq.n	8000358 <MCAL_GPIO_Init+0xac>
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	789b      	ldrb	r3, [r3, #2]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d107      	bne.n	8000368 <MCAL_GPIO_Init+0xbc>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0 ) & 0x0F );
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	789b      	ldrb	r3, [r3, #2]
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	b2db      	uxtb	r3, r3
 8000360:	f003 030f 	and.w	r3, r3, #15
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e01c      	b.n	80003a2 <MCAL_GPIO_Init+0xf6>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //consider it  as input  floating
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	789b      	ldrb	r3, [r3, #2]
 800036c:	2b08      	cmp	r3, #8
 800036e:	d102      	bne.n	8000376 <MCAL_GPIO_Init+0xca>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0 ) & 0x0F );
 8000370:	2304      	movs	r3, #4
 8000372:	73fb      	strb	r3, [r7, #15]
 8000374:	e015      	b.n	80003a2 <MCAL_GPIO_Init+0xf6>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0 ) & 0x0F );
 8000376:	2308      	movs	r3, #8
 8000378:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	789b      	ldrb	r3, [r3, #2]
 800037e:	2b02      	cmp	r3, #2
 8000380:	d107      	bne.n	8000392 <MCAL_GPIO_Init+0xe6>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR |= PinConfig->GPIO_PinNumber;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	8812      	ldrh	r2, [r2, #0]
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	e007      	b.n	80003a2 <MCAL_GPIO_Init+0xf6>
			}else{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR &= ~(PinConfig->GPIO_PinNumber);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	8812      	ldrh	r2, [r2, #0]
 800039a:	43d2      	mvns	r2, r2
 800039c:	401a      	ands	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	60da      	str	r2, [r3, #12]

		}

	}
	//write on CRL or CRH
	(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80003a2:	7bfc      	ldrb	r4, [r7, #15]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff1c 	bl	80001e6 <Get_CRLH_Position>
 80003ae:	4603      	mov	r3, r0
 80003b0:	fa04 f203 	lsl.w	r2, r4, r3
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	431a      	orrs	r2, r3
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd90      	pop	{r4, r7, pc}

080003c6 <MCAL_GPIO_ReadPin>:
 * @param [in] 			-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @retval 				-The input port pin value.
 * Note					-none
 */
uint8_t  MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{	uint8_t bitstatus;
 80003c6:	b480      	push	{r7}
 80003c8:	b085      	sub	sp, #20
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	460b      	mov	r3, r1
 80003d0:	807b      	strh	r3, [r7, #2]
if(((GPIOx->GPIOx_IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET){	//pin is 1
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	689a      	ldr	r2, [r3, #8]
 80003d6:	887b      	ldrh	r3, [r7, #2]
 80003d8:	4013      	ands	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d002      	beq.n	80003e4 <MCAL_GPIO_ReadPin+0x1e>
	bitstatus=GPIO_PIN_SET;
 80003de:	2301      	movs	r3, #1
 80003e0:	73fb      	strb	r3, [r7, #15]
 80003e2:	e001      	b.n	80003e8 <MCAL_GPIO_ReadPin+0x22>
}else{
	bitstatus=GPIO_PIN_RESET; //pin is 0
 80003e4:	2300      	movs	r3, #0
 80003e6:	73fb      	strb	r3, [r7, #15]
}
return bitstatus;
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx , uint16_t Value)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIOx_ODR = (uint32_t)Value;
 8000400:	887a      	ldrh	r2, [r7, #2]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	60da      	str	r2, [r3, #12]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <MCAL_SYSTICK_Init>:
 * @brief 			- Initializes the SYSTICK peripheral according to the specified parameters in the Systick_Config_t
 * @param [in] 		- *pSystickConfig point to structure that holds configuration of systick timer.
 * @retval 			- none
 * Note				- none
 */
void MCAL_SYSTICK_Init(Systick_Config_t* pSystickConfig ){
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	SYSTICK_STK_CTRL = 0x0000;
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MCAL_SYSTICK_Init+0x78>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
	if(pSystickConfig->CLKSOURCE == CLKSOURCE_AHB){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d109      	bne.n	800043a <MCAL_SYSTICK_Init+0x2a>

		SYSTICK_STK_CTRL |= (1<<2);
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MCAL_SYSTICK_Init+0x78>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a17      	ldr	r2, [pc, #92]	; (8000488 <MCAL_SYSTICK_Init+0x78>)
 800042c:	f043 0304 	orr.w	r3, r3, #4
 8000430:	6013      	str	r3, [r2, #0]
		systick_clk =8; // assume HSI is used
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <MCAL_SYSTICK_Init+0x7c>)
 8000434:	2208      	movs	r2, #8
 8000436:	701a      	strb	r2, [r3, #0]
 8000438:	e00c      	b.n	8000454 <MCAL_SYSTICK_Init+0x44>

	}else if(pSystickConfig->CLKSOURCE == CLKSOURCE_AHB_8){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d108      	bne.n	8000454 <MCAL_SYSTICK_Init+0x44>

		SYSTICK_STK_CTRL &= ~(1<<2);
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <MCAL_SYSTICK_Init+0x78>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a10      	ldr	r2, [pc, #64]	; (8000488 <MCAL_SYSTICK_Init+0x78>)
 8000448:	f023 0304 	bic.w	r3, r3, #4
 800044c:	6013      	str	r3, [r2, #0]
		systick_clk=1;
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MCAL_SYSTICK_Init+0x7c>)
 8000450:	2201      	movs	r2, #1
 8000452:	701a      	strb	r2, [r3, #0]
	}

	if(pSystickConfig->SYSTICK_INT == SYSTICK_INT_enable){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	785b      	ldrb	r3, [r3, #1]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d106      	bne.n	800046a <MCAL_SYSTICK_Init+0x5a>
		SYSTICK_STK_CTRL |= (1<<1);
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <MCAL_SYSTICK_Init+0x78>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <MCAL_SYSTICK_Init+0x78>)
 8000462:	f043 0302 	orr.w	r3, r3, #2
 8000466:	6013      	str	r3, [r2, #0]
	}
	else if(pSystickConfig->SYSTICK_INT == SYSTICK_INT_disable){
		SYSTICK_STK_CTRL &= ~(1<<1);
		//todo
	}
}
 8000468:	e009      	b.n	800047e <MCAL_SYSTICK_Init+0x6e>
	else if(pSystickConfig->SYSTICK_INT == SYSTICK_INT_disable){
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	785b      	ldrb	r3, [r3, #1]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d105      	bne.n	800047e <MCAL_SYSTICK_Init+0x6e>
		SYSTICK_STK_CTRL &= ~(1<<1);
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <MCAL_SYSTICK_Init+0x78>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a04      	ldr	r2, [pc, #16]	; (8000488 <MCAL_SYSTICK_Init+0x78>)
 8000478:	f023 0302 	bic.w	r3, r3, #2
 800047c:	6013      	str	r3, [r2, #0]
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	e000e010 	.word	0xe000e010
 800048c:	20000000 	.word	0x20000000

08000490 <MCAL_SYSTICK_disable>:

void MCAL_SYSTICK_disable(void){
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	SYSTICK_STK_CTRL = 0x0000;
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <MCAL_SYSTICK_disable+0x14>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	e000e010 	.word	0xe000e010

080004a8 <MCAL_SYSTICK_delay_ms>:

void MCAL_SYSTICK_delay_ms(uint32_t ms){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	SET_BIT(SYSTICK_STK_CTRL,0);
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MCAL_SYSTICK_delay_ms+0x50>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <MCAL_SYSTICK_delay_ms+0x50>)
 80004b6:	f043 0301 	orr.w	r3, r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
	SYSTICK_STK_LOAD= (ms*1000)*systick_clk;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <MCAL_SYSTICK_delay_ms+0x54>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	fb03 f302 	mul.w	r3, r3, r2
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <MCAL_SYSTICK_delay_ms+0x58>)
 80004ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004ce:	fb01 f303 	mul.w	r3, r1, r3
 80004d2:	6013      	str	r3, [r2, #0]
	if(GET_BIT(SYSTICK_STK_CTRL,1) == 0){
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MCAL_SYSTICK_delay_ms+0x50>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	085b      	lsrs	r3, r3, #1
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d104      	bne.n	80004ec <MCAL_SYSTICK_delay_ms+0x44>
		while(SYSTICK_STK_VAL != 0 );
 80004e2:	bf00      	nop
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <MCAL_SYSTICK_delay_ms+0x5c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d1fb      	bne.n	80004e4 <MCAL_SYSTICK_delay_ms+0x3c>
	}
	MCAL_SYSTICK_disable();
 80004ec:	f7ff ffd0 	bl	8000490 <MCAL_SYSTICK_disable>

}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	e000e010 	.word	0xe000e010
 80004fc:	20000000 	.word	0x20000000
 8000500:	e000e014 	.word	0xe000e014
 8000504:	e000e018 	.word	0xe000e018

08000508 <ButtonCheck>:
}Buttom_status;

uint8_t pauseFlag =0;


Buttom_status ButtonCheck(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	Buttom_status retval = NoPress;
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]
	if(HAL_button_u8read(GPIOB,Start_Resume)){
 8000512:	2101      	movs	r1, #1
 8000514:	482a      	ldr	r0, [pc, #168]	; (80005c0 <ButtonCheck+0xb8>)
 8000516:	f7ff fe38 	bl	800018a <HAL_button_u8read>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d00f      	beq.n	8000540 <ButtonCheck+0x38>
		MCAL_SYSTICK_delay_ms(10);
 8000520:	200a      	movs	r0, #10
 8000522:	f7ff ffc1 	bl	80004a8 <MCAL_SYSTICK_delay_ms>
		if(HAL_button_u8read(GPIOB,Start_Resume)){
 8000526:	2101      	movs	r1, #1
 8000528:	4825      	ldr	r0, [pc, #148]	; (80005c0 <ButtonCheck+0xb8>)
 800052a:	f7ff fe2e 	bl	800018a <HAL_button_u8read>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d03f      	beq.n	80005b4 <ButtonCheck+0xac>
			pauseFlag = 0;
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <ButtonCheck+0xbc>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
			retval = Start_ResumePress;
 800053a:	2301      	movs	r3, #1
 800053c:	71fb      	strb	r3, [r7, #7]
 800053e:	e039      	b.n	80005b4 <ButtonCheck+0xac>
		}

	}else if(HAL_button_u8read(GPIOB,Reset)){
 8000540:	2108      	movs	r1, #8
 8000542:	481f      	ldr	r0, [pc, #124]	; (80005c0 <ButtonCheck+0xb8>)
 8000544:	f7ff fe21 	bl	800018a <HAL_button_u8read>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00c      	beq.n	8000568 <ButtonCheck+0x60>
			MCAL_SYSTICK_delay_ms(10);
 800054e:	200a      	movs	r0, #10
 8000550:	f7ff ffaa 	bl	80004a8 <MCAL_SYSTICK_delay_ms>
			if(HAL_button_u8read(GPIOB,Reset)){
 8000554:	2108      	movs	r1, #8
 8000556:	481a      	ldr	r0, [pc, #104]	; (80005c0 <ButtonCheck+0xb8>)
 8000558:	f7ff fe17 	bl	800018a <HAL_button_u8read>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d028      	beq.n	80005b4 <ButtonCheck+0xac>
				retval=  ResetPress;
 8000562:	2303      	movs	r3, #3
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	e025      	b.n	80005b4 <ButtonCheck+0xac>
			}

		}else if(HAL_button_u8read(GPIOB,Pause) || pauseFlag ==1){
 8000568:	2102      	movs	r1, #2
 800056a:	4815      	ldr	r0, [pc, #84]	; (80005c0 <ButtonCheck+0xb8>)
 800056c:	f7ff fe0d 	bl	800018a <HAL_button_u8read>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d103      	bne.n	800057e <ButtonCheck+0x76>
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <ButtonCheck+0xbc>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d113      	bne.n	80005a6 <ButtonCheck+0x9e>
		MCAL_SYSTICK_delay_ms(5);
 800057e:	2005      	movs	r0, #5
 8000580:	f7ff ff92 	bl	80004a8 <MCAL_SYSTICK_delay_ms>
		if(HAL_button_u8read(GPIOB,Pause) || pauseFlag ==1){
 8000584:	2102      	movs	r1, #2
 8000586:	480e      	ldr	r0, [pc, #56]	; (80005c0 <ButtonCheck+0xb8>)
 8000588:	f7ff fdff 	bl	800018a <HAL_button_u8read>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d103      	bne.n	800059a <ButtonCheck+0x92>
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <ButtonCheck+0xbc>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d10b      	bne.n	80005b2 <ButtonCheck+0xaa>
			pauseFlag = 1;
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <ButtonCheck+0xbc>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
			retval = PausePress;
 80005a0:	2302      	movs	r3, #2
 80005a2:	71fb      	strb	r3, [r7, #7]
		if(HAL_button_u8read(GPIOB,Pause) || pauseFlag ==1){
 80005a4:	e005      	b.n	80005b2 <ButtonCheck+0xaa>
		}

	}else{
		MCAL_SYSTICK_delay_ms(10);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f7ff ff7e 	bl	80004a8 <MCAL_SYSTICK_delay_ms>
		retval = NoPress;
 80005ac:	2300      	movs	r3, #0
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	e000      	b.n	80005b4 <ButtonCheck+0xac>
		if(HAL_button_u8read(GPIOB,Pause) || pauseFlag ==1){
 80005b2:	bf00      	nop
	}
	return retval;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40010c00 	.word	0x40010c00
 80005c4:	20000020 	.word	0x20000020

080005c8 <main>:





int main(){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	Buttom_status x;
	RCC_GPIOA_CLK_EN();
 80005ce:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <main+0xb8>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <main+0xb8>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <main+0xb8>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a28      	ldr	r2, [pc, #160]	; (8000680 <main+0xb8>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	6193      	str	r3, [r2, #24]
	SSD_BCD_init(GPIOA, &SSD_BCD_Config1);
 80005e6:	4927      	ldr	r1, [pc, #156]	; (8000684 <main+0xbc>)
 80005e8:	4827      	ldr	r0, [pc, #156]	; (8000688 <main+0xc0>)
 80005ea:	f7ff fddf 	bl	80001ac <SSD_BCD_init>
	SSD_BCD_init(GPIOA, &SSD_BCD_Config2);
 80005ee:	4927      	ldr	r1, [pc, #156]	; (800068c <main+0xc4>)
 80005f0:	4825      	ldr	r0, [pc, #148]	; (8000688 <main+0xc0>)
 80005f2:	f7ff fddb 	bl	80001ac <SSD_BCD_init>
	SSD_BCD_init(GPIOA, &SSD_BCD_Config3);
 80005f6:	4926      	ldr	r1, [pc, #152]	; (8000690 <main+0xc8>)
 80005f8:	4823      	ldr	r0, [pc, #140]	; (8000688 <main+0xc0>)
 80005fa:	f7ff fdd7 	bl	80001ac <SSD_BCD_init>
	SSD_BCD_init(GPIOA, &SSD_BCD_Config4);
 80005fe:	4925      	ldr	r1, [pc, #148]	; (8000694 <main+0xcc>)
 8000600:	4821      	ldr	r0, [pc, #132]	; (8000688 <main+0xc0>)
 8000602:	f7ff fdd3 	bl	80001ac <SSD_BCD_init>
	HAL_button_vInit(GPIOB, &PB1config);
 8000606:	4924      	ldr	r1, [pc, #144]	; (8000698 <main+0xd0>)
 8000608:	4824      	ldr	r0, [pc, #144]	; (800069c <main+0xd4>)
 800060a:	f7ff fdb1 	bl	8000170 <HAL_button_vInit>
	HAL_button_vInit(GPIOB, &PB2config);
 800060e:	4924      	ldr	r1, [pc, #144]	; (80006a0 <main+0xd8>)
 8000610:	4822      	ldr	r0, [pc, #136]	; (800069c <main+0xd4>)
 8000612:	f7ff fdad 	bl	8000170 <HAL_button_vInit>
	HAL_button_vInit(GPIOB, &PB3config);
 8000616:	4923      	ldr	r1, [pc, #140]	; (80006a4 <main+0xdc>)
 8000618:	4820      	ldr	r0, [pc, #128]	; (800069c <main+0xd4>)
 800061a:	f7ff fda9 	bl	8000170 <HAL_button_vInit>
	MCAL_SYSTICK_Init(&SYStick_config);
 800061e:	4822      	ldr	r0, [pc, #136]	; (80006a8 <main+0xe0>)
 8000620:	f7ff fef6 	bl	8000410 <MCAL_SYSTICK_Init>
	uint8_t i = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	71fb      	strb	r3, [r7, #7]
	while(1){
		//start press
		while(ButtonCheck() !=Start_ResumePress);
 8000628:	bf00      	nop
 800062a:	f7ff ff6d 	bl	8000508 <ButtonCheck>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d1fa      	bne.n	800062a <main+0x62>
		while((ButtonCheck() != ResetPress) ){
 8000634:	e017      	b.n	8000666 <main+0x9e>
			SSD_BCD_display(GPIOA,i);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4619      	mov	r1, r3
 800063a:	4813      	ldr	r0, [pc, #76]	; (8000688 <main+0xc0>)
 800063c:	f7ff fdc3 	bl	80001c6 <SSD_BCD_display>
			MCAL_SYSTICK_delay_ms(500);
 8000640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000644:	f7ff ff30 	bl	80004a8 <MCAL_SYSTICK_delay_ms>
			while(ButtonCheck() == PausePress);
 8000648:	bf00      	nop
 800064a:	f7ff ff5d 	bl	8000508 <ButtonCheck>
 800064e:	4603      	mov	r3, r0
 8000650:	2b02      	cmp	r3, #2
 8000652:	d0fa      	beq.n	800064a <main+0x82>
			if(i==9){
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b09      	cmp	r3, #9
 8000658:	d102      	bne.n	8000660 <main+0x98>
				i = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	e002      	b.n	8000666 <main+0x9e>
			}else{
				i++;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	3301      	adds	r3, #1
 8000664:	71fb      	strb	r3, [r7, #7]
		while((ButtonCheck() != ResetPress) ){
 8000666:	f7ff ff4f 	bl	8000508 <ButtonCheck>
 800066a:	4603      	mov	r3, r0
 800066c:	2b03      	cmp	r3, #3
 800066e:	d1e2      	bne.n	8000636 <main+0x6e>
			}

		}
		i=0;
 8000670:	2300      	movs	r3, #0
 8000672:	71fb      	strb	r3, [r7, #7]
		SSD_BCD_display(GPIOA,i);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4619      	mov	r1, r3
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <main+0xc0>)
 800067a:	f7ff fda4 	bl	80001c6 <SSD_BCD_display>
		while(ButtonCheck() !=Start_ResumePress);
 800067e:	e7d3      	b.n	8000628 <main+0x60>
 8000680:	40021000 	.word	0x40021000
 8000684:	0800076c 	.word	0x0800076c
 8000688:	40010800 	.word	0x40010800
 800068c:	08000770 	.word	0x08000770
 8000690:	08000774 	.word	0x08000774
 8000694:	08000778 	.word	0x08000778
 8000698:	08000760 	.word	0x08000760
 800069c:	40010c00 	.word	0x40010c00
 80006a0:	08000764 	.word	0x08000764
 80006a4:	08000768 	.word	0x08000768
 80006a8:	0800077c 	.word	0x0800077c

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 f811 	bl	8000700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff ff73 	bl	80005c8 <main>

080006e2 <LoopForever>:

LoopForever:
  b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006f0:	0800078c 	.word	0x0800078c
  ldr r2, =_sbss
 80006f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006f8:	20000024 	.word	0x20000024

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>
	...

08000700 <__libc_init_array>:
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	2500      	movs	r5, #0
 8000704:	4e0c      	ldr	r6, [pc, #48]	; (8000738 <__libc_init_array+0x38>)
 8000706:	4c0d      	ldr	r4, [pc, #52]	; (800073c <__libc_init_array+0x3c>)
 8000708:	1ba4      	subs	r4, r4, r6
 800070a:	10a4      	asrs	r4, r4, #2
 800070c:	42a5      	cmp	r5, r4
 800070e:	d109      	bne.n	8000724 <__libc_init_array+0x24>
 8000710:	f000 f81a 	bl	8000748 <_init>
 8000714:	2500      	movs	r5, #0
 8000716:	4e0a      	ldr	r6, [pc, #40]	; (8000740 <__libc_init_array+0x40>)
 8000718:	4c0a      	ldr	r4, [pc, #40]	; (8000744 <__libc_init_array+0x44>)
 800071a:	1ba4      	subs	r4, r4, r6
 800071c:	10a4      	asrs	r4, r4, #2
 800071e:	42a5      	cmp	r5, r4
 8000720:	d105      	bne.n	800072e <__libc_init_array+0x2e>
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000728:	4798      	blx	r3
 800072a:	3501      	adds	r5, #1
 800072c:	e7ee      	b.n	800070c <__libc_init_array+0xc>
 800072e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000732:	4798      	blx	r3
 8000734:	3501      	adds	r5, #1
 8000736:	e7f2      	b.n	800071e <__libc_init_array+0x1e>
 8000738:	08000784 	.word	0x08000784
 800073c:	08000784 	.word	0x08000784
 8000740:	08000784 	.word	0x08000784
 8000744:	08000788 	.word	0x08000788

08000748 <_init>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	bf00      	nop
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr

08000754 <_fini>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	bf00      	nop
 8000758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800075a:	bc08      	pop	{r3}
 800075c:	469e      	mov	lr, r3
 800075e:	4770      	bx	lr
